{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"dependency/","title":"Dependency","text":"<p>Dependency function to determine the localization based on the Accept-Language header.</p> <p>Parameters:</p> Name Type Description Default <code>accept_language</code> <code>Annotated[Union[str, None], Header()]</code> <p>The Accept-Language header value.</p> <code>None</code> <p>Returns:</p> Type Description <code>Callable[[str, dict], str]</code> <p>A partially applied gettext function with the selected locale.</p> Source code in <code>fastapi_localization/dependency.py</code> <pre><code>async def localization_dependency(\n    accept_language: Annotated[Union[str, None], Header()] = None,\n) -&gt; Callable[[str, dict], str]:\n    \"\"\"\n    Dependency function to determine the localization based on the Accept-Language header.\n\n    :param accept_language: The Accept-Language header value.\n    :return: A partially applied gettext function with the selected locale.\n    \"\"\"\n    locale = localization.default_locale\n\n    if accept_language is not None:\n        language_preferences = accept_language_parser(accept_language=accept_language)\n        for language_preference in language_preferences:\n            if language_preference.language in localization.allowed_locales:\n                locale = language_preference.language\n                logger.debug(f\"Selected {locale=}\")\n                break\n        else:\n            logger.debug(f\"Using default {locale=}\")\n    else:\n        logger.debug(f\"Using default {locale=}\")\n    return partial(localization.gettext, locale=locale)\n</code></pre> <p>Dependency to determine the localization based on the Accept-Language header.</p> <p>Examples:     <pre><code>from fastapi import FastAPI\nfrom fastapi_localization import L10nDepends\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def root(_: L10nDepends):\n    return _(\"hello-message\", args={\"username\": \"John\"})\n</code></pre></p>"},{"location":"parser/","title":"Parser","text":"<p>Parses the <code>Accept-Language</code> header and returns a list of <code>LanguagePreference</code> objects, sorted by weight in descending order.</p> <p>Examples:     <pre><code>from fastapi_localization.parser import accept_language_parser\n\naccept_language_parser(\"en-US,en;q=0.9,fr;q=0.8,de;q=0.7\")\n# Result:\n[\n    LanguagePreference(language='en-US', weight=1.0),\n    LanguagePreference(language='en', weight=0.9),\n    LanguagePreference(language='fr', weight=0.8),\n    LanguagePreference(language='de', weight=0.7)\n]\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>accept_language</code> <code>str</code> <p>The value of the <code>Accept-Language</code> header.</p> required <p>Returns:</p> Type Description <code>list[LanguagePreference]</code> <p>A list of <code>LanguagePreference</code> objects, sorted by weight in descending order.</p> Source code in <code>fastapi_localization/parser.py</code> <pre><code>def accept_language_parser(accept_language: str) -&gt; list[LanguagePreference]:\n    \"\"\"\n    Parses the `Accept-Language` header and returns a list of `LanguagePreference` objects,\n    sorted by weight in descending order.\n\n    Examples:\n        ```python\n\n        from fastapi_localization.parser import accept_language_parser\n\n        accept_language_parser(\"en-US,en;q=0.9,fr;q=0.8,de;q=0.7\")\n        # Result:\n        [\n            LanguagePreference(language='en-US', weight=1.0),\n            LanguagePreference(language='en', weight=0.9),\n            LanguagePreference(language='fr', weight=0.8),\n            LanguagePreference(language='de', weight=0.7)\n        ]\n        ```\n\n    :param accept_language: The value of the `Accept-Language` header.\n    :return: A list of `LanguagePreference` objects, sorted by weight in descending order.\n    \"\"\"\n    languages = []\n\n    # Split the header by commas to get individual language entries\n    for entry in accept_language.split(\",\"):\n        entry = entry.strip()\n        if not entry:\n            continue\n\n        # Split into language and weight (if present)\n        parts = entry.split(\";\")\n        language = parts[0].strip()\n\n        # Default weight is 1.0 if not specified\n        weight = 1.0\n        for part in parts[1:]:\n            if part.strip().startswith(\"q=\"):\n                raw_weight = part.strip()[2:]\n                try:\n                    weight = float(raw_weight)\n                except ValueError:\n                    # If the weight is invalid, use the default\n                    logger.debug(f\"Weight '{raw_weight}' is invalid, use the default {weight=}\")\n                    weight = 1.0\n\n        languages.append(LanguagePreference(language=language, weight=weight))\n\n    # Sort by weight in descending order\n    languages.sort(key=lambda x: x.weight, reverse=True)\n\n    return languages\n</code></pre>"},{"location":"types/","title":"Types","text":"<p>Represents a language and its weight from the <code>Accept-Language</code> header.</p> <p>Parameters:</p> Name Type Description Default <code>language</code> <code>str</code> <p>The language code (e.g., \"en-US\", \"fr\").</p> required <code>weight</code> <code>float</code> <p>The weight (priority) of the language, default is 1.0.</p> <code>1.0</code> Source code in <code>fastapi_localization/types.py</code> <pre><code>@dataclass(frozen=True)\nclass LanguagePreference:\n    \"\"\"\n    Represents a language and its weight from the `Accept-Language` header.\n\n    :param language: The language code (e.g., \"en-US\", \"fr\").\n    :param weight: The weight (priority) of the language, default is 1.0.\n    \"\"\"\n\n    language: str\n    weight: float = 1.0\n</code></pre>"}]}